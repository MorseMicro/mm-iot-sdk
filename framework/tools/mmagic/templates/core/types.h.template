/*
 * Copyright {{config.copyright_year}} Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 */

#pragma once

#include <stdint.h>
#include <stdbool.h>

#include "mmutils.h"

enum mmagic_subsystems
{
    {%- for module in config.modules %}
    mmagic_{{module.name}} = {{module.id}},
    {%- endfor %}
};

{% for module in config.modules -%}
enum mmagic_{{module.name}}_cmds
{
    mmagic_{{module.name}}_cmd_get = 0,
    mmagic_{{module.name}}_cmd_set = 1,
    mmagic_{{module.name}}_cmd_load = 2,
    mmagic_{{module.name}}_cmd_commit = 3,
    {%- for command in module.commands %}
    mmagic_{{module.name}}_cmd_{{command.name}} = {{command.id}},
    {%- endfor %}
};

{% if module.events %}
enum mmagic_{{module.name}}_events
{
    {%- for event in module.events %}
    mmagic_{{module.name}}_event_{{event.name}} = {{event.id}},
    {%- endfor %}
};
{%- endif %}
{% endfor %}

{% for enum in config.enums %}
/** {{enum.description}} */
{{enum.datatype}}
{
    {%- for value in enum.values %}
    /** {{value.description}} */
    {{enum.value_identifier(value)}} = {{value.value}},
    {%- endfor %}
};
{% endfor %}

{% for maxlen in config.string_maxlens %}
/** String type with maximum length of {{maxlen}} (excluding null terminator). */
struct MM_PACKED string{{maxlen}}
{
    /** Length of string contents (excluding null terminator). */
    {%- if maxlen < 255 %}
    uint8_t len;
    {%- elif maxlen < 65535 %}
    uint16_t len;
    {%- else %}
    uint32_t len;
    {%endif %}

    /** The string contents. */
    char data[{{maxlen}} + 1];
};
{% endfor -%}

{% for maxlen in config.raw_maxlens %}
/** Raw octet string type with maximum length of {{maxlen}}. */
struct MM_PACKED raw{{maxlen}}
{
    /** Length of @c data. */
    {%- if maxlen < 256 %}
    uint8_t len;
    {%- elif maxlen < 65536 %}
    uint16_t len;
    {%- else %}
    uint32_t len;
    {%endif %}

    /** The actual data buffer. */
    uint8_t data[{{maxlen}}];
};
{% endfor -%}

{% for struct in config.structs %}
/** {{struct.description | wordwrap(80) | replace('\n', '\n * ')}} */
{{struct.decl_datatype}}
{
    {%- for element in struct.elements %}
    /** {{element.description}} */
    {{config.find_datatype(element.type)}} {{element.name}}{{config.get_array_element(element.type)}};
    {%- endfor %}
};
{% endfor -%}


{% for type in config.std_c_types %}
/**
 * Convert from @c {{type}} to a string.
 *
 * @param value Reference to the @c {{type}}.
 * @param buf   Reference to the buffer where string is to be placed.
 * @param len   Length of the buffer provided in bytes.
 *
 * @return On success the number of bytes characters written (excluding the null byte). A return
 *         value of @c len or more means that the output was truncated. On error a negative value is
 *         returned.
 *
 * @note The behaviour is the same as @c snprintf(). This will not write more than @c len in bytes
 *       (including the terminating null byte). If the output was truncated due to this limit, then
 *       the return value is the number of characters (excluding the terminating null byte) which
 *       would have been written to the final string if enough space had been available.
 */
int mmagic_{{type}}_to_string({{config.find_datatype(type)}} value, char *buf, size_t len);

/**
 * Convert from a string to @c {{type}}.
 *
 * @param value Reference to the @c {{type}} to place the parsed data.
 * @param buf   Reference to a null terminated string to parse.
 *
 * @return On success 0. On error a negative value is returned.
 */
int mmagic_string_to_{{type}}({{config.find_datatype(type)}} *value, const char *buf);
{% endfor %}

{% for type in config.struct_types_used %}
/**
 * Convert from @c {{type}} to a string.
 *
 * @param  value Reference to the @c {{type}}.
 * @param  buf   Reference to the buffer where string is to be placed.
 * @param  len   Length of the buffer provided in bytes.
 *
 * @return       On success the number of bytes characters written (excluding the null byte).
 *               A return value of @c len or more means that the output was truncated. On error
 *               a negative value is returned.
 *
 * @note The behaviour is the same as @c snprintf(). This will not write more than @c len in bytes
 *       (including the terminating null byte). If the output was truncated due to this limit, then
 *       the return value is the number of characters (excluding the terminating null byte) which
 *       would have been written to the final string if enough space had been available.
 */
int mmagic_{{type}}_to_string(const {{config.find_datatype(type)}} *value, char *buf, size_t len);

/**
 * Convert from a string to @c {{type}}.
 *
 * @param value Reference to the @c {{type}} to place the parsed data.
 * @param buf   Reference to a null terminated string to parse.
 *
 * @return On success 0. On error a negative value is returned.
 */
int mmagic_string_to_{{type}}({{config.find_datatype(type)}} *value, const char *buf);
{% endfor %}

{% for maxlen in config.string_maxlens %}
/**
 * Convert from @c string{{maxlen}} to a null-terminated string.
 *
 * @param  value @c string{{maxlen}} value.
 * @param  buf   Reference to the buffer where string is to be placed.
 * @param  len   Length of the buffer provided in bytes.
 *
 * @return       On success the number of bytes characters written (excluding the null byte).
 *               A return value of @c len or more means that the output was truncated. On error
 *               a negative value is returned.
 *
 * @note The behaviour is the same as @c snprintf(). This will not write more than @c len in bytes
 *       (including the terminating null byte). If the output was truncated due to this limit, then
 *       the return value is the number of characters (excluding the terminating null byte) which
 *       would have been written to the final string if enough space had been available.
 */
int mmagic_string{{maxlen}}_to_string(const struct string{{maxlen}} *value, char *buf, size_t len);

/**
 * Convert from a string to @c string{{maxlen}}.
 *
 * @param value Reference to the @c string{{maxlen}} to place the parsed data.
 * @param buf   Reference to a null terminated string to parse. Must be <= {{maxlen}} characters.
 *
 * @return On success 0. On error a negative value is returned.
 */
int mmagic_string_to_string{{maxlen}}(struct string{{maxlen}} *value, const char *buf);
{% endfor %}

{% for enum in config.enums %}
/**
 * Convert from @c {{enum.name}} to a string.
 *
 * @param  value Enum value to convert.
 * @param  buf   Reference to the buffer where string is to be placed.
 * @param  len   Length of the buffer provided in bytes.
 *
 * @return       On success the number of bytes characters written (excluding the
 *               null byte). A return value of @c len or more means that the output was
 *               truncated. On error a negative value is returned.
 *
 * @note The behaviour is the same as @c snprintf(). This will not write more than @c len in bytes
 *       (including the terminating null byte). If the output was truncated due to this limit, then
 *       the return value is the number of characters (excluding the terminating null byte) which
 *       would have been written to the final string if enough space had been available.
 */
int mmagic_{{enum.name}}_to_string({{enum.datatype}} value, char *buf, size_t len);

/**
 * Convert from a string to @c {{enum.name}}.
 *
 * @param value Reference to the @c {{enum.datatype}} that will be set to the parsed value on success.
 * @param buf   Reference to a null terminated string to parse
 *
 * @return On success 0. On error a negative value is returned.
 */
int mmagic_string_to_{{enum.name}}({{enum.datatype}} *value, const char *buf);
{% endfor %}


{% for module in config.modules -%}
{% for event in module.events %}
{%- if event.event_args -%}
/** Event arguments structure for {{module.name}}_{{event.name}} */
struct MM_PACKED mmagic_core_event_{{module.name}}_{{event.name}}_args
{
    {%- for arg in event.event_args %}
    {{config.find_datatype(arg.type)}} {{arg.name}}{{config.get_array_element(arg.type)}};
    {%- endfor %}
};
{%- endif %}
{%- endfor %}
{% endfor %}
