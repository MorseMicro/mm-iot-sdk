/*
 * Copyright {{config.copyright_year}} Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 */

#pragma once

#include "mmconfig.h"

/* Maximum allowed length of any value string, needs to accomodate IP and MAC address strings */
#define MAX_VAL_LEN     32

{% if data.configs -%}
void mmagic_core_{{data.name}}_load_all(struct mmagic_data *core)
{
    struct mmagic_{{data.name}}_data *data = &core->{{data.name}}_data;
    char val[MAX_VAL_LEN];
{%- for var in data.configs %}
    if (mmconfig_read_string("{{data.name}}.{{var.name}}", val, sizeof(val)) > 0)
    {
        (void)string_to_{{var.type}}(&data->config.{{var.name}}, val);
    }
{% endfor %}
}

void mmagic_core_{{data.name}}_save_all(struct mmagic_data *core)
{
    struct mmagic_{{data.name}}_data *data = &core->{{data.name}}_data;
    char val[MAX_VAL_LEN];
{%- for var in data.configs %}
    {{var.type}}_to_string(&data->config.{{var.name}}, val, sizeof(val));
    mmconfig_write_string("{{data.name}}.{{var.name}}", val);
{% endfor %}
}
{% endif %}

{% for event in data.events %}
static {{config.find_datatype("enum_status")}} mmagic_core_event_{{data.name}}_{{event.name}}(
        struct mmagic_data *core
{%- if event.event_args -%}
        ,
        const struct mmagic_core_event_{{data.name}}_{{event.name}}_args *args
{%- endif -%}
    )
{
{%- if event.event_args %}
    const uint8_t *payload = (const uint8_t *) args;
    size_t payload_len = sizeof(*args);
{%- else %}
    const uint8_t *payload = NULL;
    size_t payload_len = 0;
{%- endif %}
    MMOSAL_ASSERT(core->event_fn != NULL);
    return core->event_fn(
        core->event_fn_arg, mmagic_{{data.name}},
        mmagic_{{data.name}}_event_{{event.name}}, payload, payload_len);
}
{% endfor %}
