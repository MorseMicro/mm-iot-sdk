/*
 * Copyright {{config.copyright_year}} Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 *
 * Note: The corresponding headers files must be included BEFORE this def file. Additionally this
 *       file should only be in one (and only one) compilation unit (.c/.cpp file).
 */

#include "mmconfig.h"
#include "mmutils.h"
#include "core/autogen/mmagic_core_{{data.name}}.h"
#include "core/autogen/mmagic_core_types.h"
#include "m2m_api/autogen/mmagic_m2m_{{data.name}}.h"
#include "m2m_api/autogen/mmagic_m2m_internal.h"
#include "m2m_api/mmagic_m2m_agent.h"

/* Maximum allowed length of any value string, needs to accomodate IP and MAC address strings */
#define MAX_VAL_LEN     32

/********* M2M Command Handlers **********/
{% if data.configs -%}
static struct mmbuf* mmagic_m2m_{{data.name}}_get(struct mmagic_m2m_agent *agent,
    uint8_t sid, uint8_t subcommand, struct mmbuf* commandbuffer)
{
    MM_UNUSED(sid);
    MM_UNUSED(commandbuffer);

    struct mmagic_{{data.name}}_data *data = mmagic_data_get_{{data.name}}(&agent->core);
    switch (subcommand)
    {
{%- for var in data.configs | sort(attribute="id") %}
    case mmagic_{{data.name}}_var_{{var.name}}:
        return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_get, subcommand,
            MMAGIC_STATUS_OK, &data->config.{{var.name}},
            sizeof(data->config.{{var.name}}));
{% endfor %}
    default:
        return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_get, subcommand,
            MMAGIC_STATUS_NOT_FOUND, NULL, 0);
    }
}

static struct mmbuf* mmagic_m2m_{{data.name}}_set(struct mmagic_m2m_agent *agent,
    uint8_t sid, uint8_t subcommand, struct mmbuf* commandbuffer)
{
    MM_UNUSED(sid);
    struct mmagic_{{data.name}}_data *data = mmagic_data_get_{{data.name}}(&agent->core);
    void* args = (void*) mmbuf_get_data_start(commandbuffer);
    switch (subcommand)
    {
{%- for var in data.configs | sort(attribute="id") %}
    case mmagic_{{data.name}}_var_{{var.name}}:
        memcpy(&data->config.{{var.name}}, args, sizeof(data->config.{{var.name}}));
        return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_set,
            subcommand, MMAGIC_STATUS_OK, NULL, 0);
        break;
{% endfor %}
    default:
        return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_set,
            subcommand, MMAGIC_STATUS_NOT_FOUND, NULL, 0);
    }
}

static struct mmbuf* mmagic_m2m_{{data.name}}_load(struct mmagic_m2m_agent *agent,
    uint8_t sid, uint8_t subcommand, struct mmbuf* commandbuffer)
{
    MM_UNUSED(sid);
    MM_UNUSED(commandbuffer);

    mmagic_core_{{data.name}}_load_all(&agent->core);

    return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_load,
        subcommand, MMAGIC_STATUS_OK, NULL, 0);
}

static struct mmbuf* mmagic_m2m_{{data.name}}_commit(struct mmagic_m2m_agent *agent,
    uint8_t sid, uint8_t subcommand, struct mmbuf* commandbuffer)
{
    MM_UNUSED(sid);
    MM_UNUSED(commandbuffer);

    mmagic_core_{{data.name}}_save_all(&agent->core);

    return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_commit,
        subcommand, MMAGIC_STATUS_OK, NULL, 0);
}
{% endif %}
{%- for command in data.commands %}
static struct mmbuf* mmagic_m2m_{{data.name}}_{{command.name}}(struct mmagic_m2m_agent *agent,
    uint8_t sid, uint8_t subcommand, struct mmbuf* commandbuffer)
{
    enum mmagic_status status;
{%- if command.command_args %}
    struct mmagic_core_{{data.name}}_{{command.name}}_cmd_args* cmd_args =
        (struct mmagic_core_{{data.name}}_{{command.name}}_cmd_args*) mmbuf_get_data_start(commandbuffer);
{%- else %}
    MM_UNUSED(commandbuffer);
{%- endif %}
    MM_UNUSED(sid);

{%- if command.response_args %}
    struct mmagic_core_{{data.name}}_{{command.name}}_rsp_args rsp_args = { };
{%- if command.command_args %}
    status = mmagic_core_{{data.name}}_{{command.name}}(&agent->core, cmd_args, &rsp_args);
{%- else %}
    status = mmagic_core_{{data.name}}_{{command.name}}(&agent->core, &rsp_args);
{%- endif %}
    return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_{{command.name}},
        subcommand, status, &rsp_args, sizeof(rsp_args));
{%- else %}
{%- if command.command_args %}
    status = mmagic_core_{{data.name}}_{{command.name}}(&agent->core, cmd_args);
{%- else %}
    status = mmagic_core_{{data.name}}_{{command.name}}(&agent->core);
{%- endif %}
    return mmagic_m2m_create_response(mmagic_{{data.name}}, mmagic_{{data.name}}_cmd_{{command.name}},
        subcommand, status, NULL, 0);
{%- endif %}
}
{% endfor %}
struct mmbuf* mmagic_m2m_{{data.name}}_process(struct mmagic_m2m_agent *agent, uint8_t sid,
    struct mmagic_m2m_command_header* header, struct mmbuf* cmd_buf)
{
    if (header)
    {
        switch (header->command)
        {
{%- if data.configs %}
        case mmagic_{{data.name}}_cmd_get:
            return mmagic_m2m_{{data.name}}_get(agent, sid, header->subcommand, cmd_buf);
            break;

        case mmagic_{{data.name}}_cmd_set:
            return mmagic_m2m_{{data.name}}_set(agent, sid, header->subcommand, cmd_buf);
            break;

        case mmagic_{{data.name}}_cmd_load:
            return mmagic_m2m_{{data.name}}_load(agent, sid, header->subcommand, cmd_buf);
            break;

        case mmagic_{{data.name}}_cmd_commit:
            return mmagic_m2m_{{data.name}}_commit(agent, sid, header->subcommand, cmd_buf);
            break;
{% endif %}
{%- for command in data.commands %}
        case mmagic_{{data.name}}_cmd_{{command.name}}:
            return mmagic_m2m_{{data.name}}_{{command.name}}(agent, sid, header->subcommand, cmd_buf);
            break;
{% endfor %}
        default:
            return mmagic_m2m_create_response(header->subsystem, header->command,
                header->subcommand, MMAGIC_STATUS_NOT_SUPPORTED, NULL, 0);
        }
    }
    else
    {
        return mmagic_m2m_create_response(0, 0, 0, MMAGIC_STATUS_ERROR, NULL, 0);
    }
}
