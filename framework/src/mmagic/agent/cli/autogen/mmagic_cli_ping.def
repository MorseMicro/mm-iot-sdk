/*
 * Copyright 2025 Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 *
 * Note: The corresponding headers files must be included BEFORE this def file. Additionally this
 *       file should only be in one (and only one) compilation unit (.c/.cpp file).
 */

#include "mmconfig.h"
#include "mmutils.h"
#include "cli/mmagic_cli.h"
#include "cli/autogen/mmagic_cli_internal.h"

/* Maximum allowed length of any value string, needs to accomodate IP and MAC address strings */
#define MAX_VAL_LEN     32

/********* Getters **********/

int mmagic_cli_ping_get_target(struct mmagic_data *core, EmbeddedCli *cli)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    char buf[MMAGIC_CLI_PRINT_BUF_LEN] = {0};
    /* -1 to allow for a NULL terminator at the end */
    int len = MMAGIC_CLI_PRINT_BUF_LEN - 1;
    int written = 0;

    written = snprintf(&buf[written], len, "%-30s", "ping.target");
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;
    written = mmagic_struct_ip_addr_to_string(&data->config.target, &buf[written], len);
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;

    embeddedCliPrint(cli, buf);

    return 0;
}

int mmagic_cli_ping_get_interval(struct mmagic_data *core, EmbeddedCli *cli)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    char buf[MMAGIC_CLI_PRINT_BUF_LEN] = {0};
    /* -1 to allow for a NULL terminator at the end */
    int len = MMAGIC_CLI_PRINT_BUF_LEN - 1;
    int written = 0;

    written = snprintf(&buf[written], len, "%-30s", "ping.interval");
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;
    written = mmagic_uint32_t_to_string(data->config.interval, &buf[written], len);
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;

    embeddedCliPrint(cli, buf);

    return 0;
}

int mmagic_cli_ping_get_count(struct mmagic_data *core, EmbeddedCli *cli)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    char buf[MMAGIC_CLI_PRINT_BUF_LEN] = {0};
    /* -1 to allow for a NULL terminator at the end */
    int len = MMAGIC_CLI_PRINT_BUF_LEN - 1;
    int written = 0;

    written = snprintf(&buf[written], len, "%-30s", "ping.count");
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;
    written = mmagic_uint32_t_to_string(data->config.count, &buf[written], len);
    if (written < 0 || written > len)
    {
        return -1;
    }
    len -= written;

    embeddedCliPrint(cli, buf);

    return 0;
}


/********* Setters **********/

int mmagic_cli_ping_set_target(struct mmagic_data *core, EmbeddedCli *cli, const char *val)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    if (mmagic_string_to_struct_ip_addr(&data->config.target, val))
    {
        return -1;
    }

    mmagic_cli_ping_get_target(core, cli);

    return 0;
}

int mmagic_cli_ping_set_interval(struct mmagic_data *core, EmbeddedCli *cli, const char *val)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    if (mmagic_string_to_uint32_t(&data->config.interval, val))
    {
        return -1;
    }

    mmagic_cli_ping_get_interval(core, cli);

    return 0;
}

int mmagic_cli_ping_set_count(struct mmagic_data *core, EmbeddedCli *cli, const char *val)
{
    struct mmagic_ping_data *data = mmagic_data_get_ping(core);

    if (mmagic_string_to_uint32_t(&data->config.count, val))
    {
        return -1;
    }

    mmagic_cli_ping_get_count(core, cli);

    return 0;
}


/********* Dictionary **********
 *
 * This list must be in alphabetical order as @c mmagic_cli_element_search() is implemented using
 * a binary search which requires an ordered list.
 */
struct mmagic_cli_config_elem ping_cli_config_vars[] = {
    {"count", mmagic_cli_ping_get_count, mmagic_cli_ping_set_count},
    {"interval", mmagic_cli_ping_get_interval, mmagic_cli_ping_set_interval},
    {"target", mmagic_cli_ping_get_target, mmagic_cli_ping_set_target},
};

/********* PING Configuration Getter/Setter Handlers **********/
void mmagic_cli_ping_get(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var)
{
    struct mmagic_data *core = &ctx->core;

    if (config_var == NULL)
    {
        embeddedCliPrint(cli, "Invalid argument");
        return;
    }

    uint32_t num_elements = sizeof(ping_cli_config_vars)/sizeof(ping_cli_config_vars[0]);

    if (!strcmp("all", config_var))
    {
        for (; num_elements > 0; num_elements--)
        {
            ping_cli_config_vars[num_elements-1].get(core, cli);
        }
        return;
    }

    struct mmagic_cli_config_elem *elem = mmagic_cli_element_search(ping_cli_config_vars, num_elements, config_var);
    if (elem == NULL)
    {
        mmagic_cli_printf(cli, "Unable to find config variable 'ping.%s'", config_var);
        return;
    }

    if (elem->get == NULL)
    {
        embeddedCliPrint(cli, "Unable to find getter");
        return;
    }

    if (elem->get(core, cli))
    {
        embeddedCliPrint(cli, "Get function failed");
    }
}

void mmagic_cli_ping_set(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var, const char *val)
{
    struct mmagic_data *core = &ctx->core;

    uint32_t num_elements = sizeof(ping_cli_config_vars)/sizeof(ping_cli_config_vars[0]);

    struct mmagic_cli_config_elem *elem = mmagic_cli_element_search(ping_cli_config_vars, num_elements, config_var);
    if (elem == NULL)
    {
        mmagic_cli_printf(cli, "Unable to find config variable 'ping.%s'", config_var);
        return;
    }

    if (elem->set == NULL)
    {
        embeddedCliPrint(cli, "Unable to find setter");
        return;
    }

    if (elem->set(core, cli, val))
    {
        mmagic_cli_printf(cli, "Set ping.%s failed", elem->name);
    }
}

/********* Persistence *******/
void mmagic_cli_ping_commit(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var)
{
    if ((config_var != NULL) && strcmp("all", config_var))
    {
        embeddedCliPrint(cli, "Unexpected argument! Only \'ping\' or \'ping.all\' supported.");
        return;
    }

    mmagic_core_ping_save_all(&ctx->core);
    embeddedCliPrint(cli, "Successfully committed 'ping' variables");
    
}

void mmagic_cli_ping_load(struct mmagic_cli *ctx, EmbeddedCli *cli)
{
    MM_UNUSED(cli);
    mmagic_core_ping_load_all(&ctx->core);
    
}

/********* CLI Command Handlers **********/

void mmagic_cli_ping_run(EmbeddedCli *cli, char *args, void *context);

/********* Register bindings function definition **********/
void mmagic_cli_ping_register_bindings(EmbeddedCli *cli, struct mmagic_data *core)
{
    
    embeddedCliAddBinding(cli, (CliCommandBinding) {
        "ping-run",
        "Commences a ping session using the current values in the the subsystem config.",
        true,
        core,
        mmagic_cli_ping_run
    });
    
}

void mmagic_cli_ping_init(struct mmagic_cli *ctx)
{
    /* Register Commands */
    mmagic_cli_ping_register_bindings(ctx->cli, &ctx->core);

    /* Register config variable accessor functions */
    struct mmagic_cli_config_accessor *accessor =
        (struct mmagic_cli_config_accessor *)mmosal_malloc(sizeof(*accessor));
    MMOSAL_ASSERT(accessor);

    mmosal_safer_strcpy(accessor->name, "ping", sizeof(accessor->name));
    accessor->get = mmagic_cli_ping_get;
    accessor->set = mmagic_cli_ping_set;
    accessor->commit = mmagic_cli_ping_commit;
    accessor->next = NULL;

    mmagic_cli_register_config_accessor(ctx, accessor);
}
