/*
 * Copyright 2024 Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 *
 * Note: The corresponding headers files must be included BEFORE this def file. Additionally this
 *       file should only be in one (and only one) compilation unit (.c/.cpp file).
 */

#include "mmconfig.h"
#include "mmutils.h"
#include "cli/mmagic_cli.h"
#include "cli/autogen/mmagic_cli_internal.h"

/* Maximum allowed length of any value string, needs to accomodate IP and MAC address strings */
#define MAX_VAL_LEN     32

/********* Getters **********/


/********* Setters **********/


/********* Dictionary **********/
struct mmagic_cli_config_elem sys_cli_config_vars[] = {
};

/********* SYS Configuration Getter/Setter Handlers **********/
void mmagic_cli_sys_get(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var)
{
    struct mmagic_data *core = &ctx->core;

    if (config_var == NULL)
    {
        embeddedCliPrint(cli, "Invalid argument");
        return;
    }

    uint32_t num_elements = sizeof(sys_cli_config_vars)/sizeof(sys_cli_config_vars[0]);

    if (!strcmp("all", config_var))
    {
        for (; num_elements > 0; num_elements--)
        {
            sys_cli_config_vars[num_elements-1].get(core, cli);
        }
        return;
    }

    struct mmagic_cli_config_elem *elem = mmagic_cli_element_search(sys_cli_config_vars, num_elements, config_var);
    if (elem == NULL)
    {
        embeddedCliPrint(cli, "Unable to find config variable");
        return;
    }

    if (elem->get == NULL)
    {
        embeddedCliPrint(cli, "Unable to find getter");
        return;
    }

    if (elem->get(core, cli))
    {
        embeddedCliPrint(cli, "Get function failed");
    }
}

void mmagic_cli_sys_set(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var, const char *val)
{
    struct mmagic_data *core = &ctx->core;

    uint32_t num_elements = sizeof(sys_cli_config_vars)/sizeof(sys_cli_config_vars[0]);

    struct mmagic_cli_config_elem *elem = mmagic_cli_element_search(sys_cli_config_vars, num_elements, config_var);
    if (elem == NULL)
    {
        mmagic_cli_printf(cli, "Unable to find config variable sys.%s", config_var);
        return;
    }

    if (elem->set == NULL)
    {
        embeddedCliPrint(cli, "Unable to find setter");
        return;
    }

    if (elem->set(core, cli, val))
    {
        mmagic_cli_printf(cli, "Set sys.%s failed", elem->name);
    }
}

/********* Persistence *******/
void mmagic_cli_sys_commit(struct mmagic_cli *ctx, EmbeddedCli *cli, const char *config_var)
{
    if ((config_var != NULL) && strcmp("all", config_var))
    {
        embeddedCliPrint(cli, "Unexpected argument! Only \'sys\' or \'sys.all\' supported.");
        return;
    }

    
    MM_UNUSED(ctx);
}

void mmagic_cli_sys_load(struct mmagic_cli *ctx, EmbeddedCli *cli)
{
    MM_UNUSED(cli);
    
    MM_UNUSED(ctx);
}

/********* CLI Command Handlers **********/

void mmagic_cli_sys_reset(EmbeddedCli *cli, char *args, void *context);
void mmagic_cli_sys_deep_sleep(EmbeddedCli *cli, char *args, void *context);
void mmagic_cli_sys_get_version(EmbeddedCli *cli, char *args, void *context);

/********* Register bindings function definition **********/
void mmagic_cli_sys_register_bindings(EmbeddedCli *cli, struct mmagic_data *core)
{
    
    embeddedCliAddBinding(cli, (CliCommandBinding) {
        "sys-reset",
        "Performs a soft reset.",
        true,
        core,
        mmagic_cli_sys_reset
    });
    
    embeddedCliAddBinding(cli, (CliCommandBinding) {
        "sys-deep_sleep",
        "Enters deep sleep mode.",
        true,
        core,
        mmagic_cli_sys_deep_sleep
    });
    
    embeddedCliAddBinding(cli, (CliCommandBinding) {
        "sys-get_version",
        "Gets the device firmware and hardware versions.",
        true,
        core,
        mmagic_cli_sys_get_version
    });
    
}

void mmagic_cli_sys_init(struct mmagic_cli *ctx)
{
    /* Register Commands */
    mmagic_cli_sys_register_bindings(ctx->cli, &ctx->core);

    /* Register config variable accessor functions */
    struct mmagic_cli_config_accessor *accessor =
        (struct mmagic_cli_config_accessor *)mmosal_malloc(sizeof(*accessor));
    MMOSAL_ASSERT(accessor);

    mmosal_safer_strcpy(accessor->name, "sys", sizeof(accessor->name));
    accessor->get = mmagic_cli_sys_get;
    accessor->set = mmagic_cli_sys_set;
    accessor->commit = mmagic_cli_sys_commit;
    accessor->next = NULL;

    mmagic_cli_register_config_accessor(ctx, accessor);
}
