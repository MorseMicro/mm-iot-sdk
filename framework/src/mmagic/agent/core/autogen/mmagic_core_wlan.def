/*
 * Copyright 2025 Morse Micro
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Warning: this file is autogenerated. Do not modify by hand.
 */

#pragma once

#include "mmconfig.h"

/* Maximum allowed length of any value string, needs to accomodate IP and MAC address strings */
#define MAX_VAL_LEN     32

void mmagic_core_wlan_load_all(struct mmagic_data *core)
{
    struct mmagic_wlan_data *data = &core->wlan_data;
    char val[MAX_VAL_LEN];
    if (mmconfig_read_string("wlan.country_code", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_country_code(&data->config.country_code, val);
    }

    if (mmconfig_read_string("wlan.ssid", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.ssid, val);
    }

    if (mmconfig_read_string("wlan.password", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.password, val);
    }

    if (mmconfig_read_string("wlan.security", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_enum_security_type(&data->config.security, val);
    }

    if (mmconfig_read_string("wlan.raw_priority", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_int16_t(&data->config.raw_priority, val);
    }

    if (mmconfig_read_string("wlan.bssid", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_mac_addr(&data->config.bssid, val);
    }

    if (mmconfig_read_string("wlan.pmf_mode", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_enum_pmf_mode(&data->config.pmf_mode, val);
    }

    if (mmconfig_read_string("wlan.station_type", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_enum_station_type(&data->config.station_type, val);
    }

    if (mmconfig_read_string("wlan.rts_threshold", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint32_t(&data->config.rts_threshold, val);
    }

    if (mmconfig_read_string("wlan.sgi_enabled", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.sgi_enabled, val);
    }

    if (mmconfig_read_string("wlan.subbands_enabled", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.subbands_enabled, val);
    }

    if (mmconfig_read_string("wlan.ampdu_enabled", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.ampdu_enabled, val);
    }

    if (mmconfig_read_string("wlan.power_save_mode", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_enum_power_save_mode(&data->config.power_save_mode, val);
    }

    if (mmconfig_read_string("wlan.fragment_threshold", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint32_t(&data->config.fragment_threshold, val);
    }

    if (mmconfig_read_string("wlan.cac_enabled", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.cac_enabled, val);
    }

    if (mmconfig_read_string("wlan.offload_arp_response", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.offload_arp_response, val);
    }

    if (mmconfig_read_string("wlan.offload_arp_refresh_s", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint32_t(&data->config.offload_arp_refresh_s, val);
    }

    if (mmconfig_read_string("wlan.min_health_check_intvl_ms", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint32_t(&data->config.min_health_check_intvl_ms, val);
    }

    if (mmconfig_read_string("wlan.max_health_check_intvl_ms", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint32_t(&data->config.max_health_check_intvl_ms, val);
    }

    if (mmconfig_read_string("wlan.ndp_probe_enabled", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_bool(&data->config.ndp_probe_enabled, val);
    }

    if (mmconfig_read_string("wlan.sta_scan_interval_base_s", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint16_t(&data->config.sta_scan_interval_base_s, val);
    }

    if (mmconfig_read_string("wlan.sta_scan_interval_limit_s", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_uint16_t(&data->config.sta_scan_interval_limit_s, val);
    }

    if (mmconfig_read_string("wlan.qos_0_params", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.qos_0_params, val);
    }

    if (mmconfig_read_string("wlan.qos_1_params", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.qos_1_params, val);
    }

    if (mmconfig_read_string("wlan.qos_2_params", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.qos_2_params, val);
    }

    if (mmconfig_read_string("wlan.qos_3_params", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_struct_string_32(&data->config.qos_3_params, val);
    }

    if (mmconfig_read_string("wlan.mcs10_mode", val, sizeof(val)) > 0)
    {
        (void)mmagic_string_to_enum_mcs10_mode(&data->config.mcs10_mode, val);
    }

}

void mmagic_core_wlan_save_all(struct mmagic_data *core)
{
    struct mmagic_wlan_data *data = &core->wlan_data;
    char val[MAX_VAL_LEN];
    mmagic_struct_country_code_to_string(&data->config.country_code, val, sizeof(val));
    mmconfig_write_string("wlan.country_code", val);

    mmagic_struct_string_32_to_string(&data->config.ssid, val, sizeof(val));
    mmconfig_write_string("wlan.ssid", val);

    mmagic_struct_string_32_to_string(&data->config.password, val, sizeof(val));
    mmconfig_write_string("wlan.password", val);

    mmagic_enum_security_type_to_string(data->config.security, val, sizeof(val));
    mmconfig_write_string("wlan.security", val);

    mmagic_int16_t_to_string(data->config.raw_priority, val, sizeof(val));
    mmconfig_write_string("wlan.raw_priority", val);

    mmagic_struct_mac_addr_to_string(&data->config.bssid, val, sizeof(val));
    mmconfig_write_string("wlan.bssid", val);

    mmagic_enum_pmf_mode_to_string(data->config.pmf_mode, val, sizeof(val));
    mmconfig_write_string("wlan.pmf_mode", val);

    mmagic_enum_station_type_to_string(data->config.station_type, val, sizeof(val));
    mmconfig_write_string("wlan.station_type", val);

    mmagic_uint32_t_to_string(data->config.rts_threshold, val, sizeof(val));
    mmconfig_write_string("wlan.rts_threshold", val);

    mmagic_bool_to_string(data->config.sgi_enabled, val, sizeof(val));
    mmconfig_write_string("wlan.sgi_enabled", val);

    mmagic_bool_to_string(data->config.subbands_enabled, val, sizeof(val));
    mmconfig_write_string("wlan.subbands_enabled", val);

    mmagic_bool_to_string(data->config.ampdu_enabled, val, sizeof(val));
    mmconfig_write_string("wlan.ampdu_enabled", val);

    mmagic_enum_power_save_mode_to_string(data->config.power_save_mode, val, sizeof(val));
    mmconfig_write_string("wlan.power_save_mode", val);

    mmagic_uint32_t_to_string(data->config.fragment_threshold, val, sizeof(val));
    mmconfig_write_string("wlan.fragment_threshold", val);

    mmagic_bool_to_string(data->config.cac_enabled, val, sizeof(val));
    mmconfig_write_string("wlan.cac_enabled", val);

    mmagic_bool_to_string(data->config.offload_arp_response, val, sizeof(val));
    mmconfig_write_string("wlan.offload_arp_response", val);

    mmagic_uint32_t_to_string(data->config.offload_arp_refresh_s, val, sizeof(val));
    mmconfig_write_string("wlan.offload_arp_refresh_s", val);

    mmagic_uint32_t_to_string(data->config.min_health_check_intvl_ms, val, sizeof(val));
    mmconfig_write_string("wlan.min_health_check_intvl_ms", val);

    mmagic_uint32_t_to_string(data->config.max_health_check_intvl_ms, val, sizeof(val));
    mmconfig_write_string("wlan.max_health_check_intvl_ms", val);

    mmagic_bool_to_string(data->config.ndp_probe_enabled, val, sizeof(val));
    mmconfig_write_string("wlan.ndp_probe_enabled", val);

    mmagic_uint16_t_to_string(data->config.sta_scan_interval_base_s, val, sizeof(val));
    mmconfig_write_string("wlan.sta_scan_interval_base_s", val);

    mmagic_uint16_t_to_string(data->config.sta_scan_interval_limit_s, val, sizeof(val));
    mmconfig_write_string("wlan.sta_scan_interval_limit_s", val);

    mmagic_struct_string_32_to_string(&data->config.qos_0_params, val, sizeof(val));
    mmconfig_write_string("wlan.qos_0_params", val);

    mmagic_struct_string_32_to_string(&data->config.qos_1_params, val, sizeof(val));
    mmconfig_write_string("wlan.qos_1_params", val);

    mmagic_struct_string_32_to_string(&data->config.qos_2_params, val, sizeof(val));
    mmconfig_write_string("wlan.qos_2_params", val);

    mmagic_struct_string_32_to_string(&data->config.qos_3_params, val, sizeof(val));
    mmconfig_write_string("wlan.qos_3_params", val);

    mmagic_enum_mcs10_mode_to_string(data->config.mcs10_mode, val, sizeof(val));
    mmconfig_write_string("wlan.mcs10_mode", val);

}



static enum mmagic_status mmagic_core_event_wlan_beacon_rx(
        struct mmagic_data *core,
        const struct mmagic_core_event_wlan_beacon_rx_args *args)
{
    const uint8_t *payload = (const uint8_t *) args;
    size_t payload_len = sizeof(*args);
    MMOSAL_ASSERT(core->event_fn != NULL);
    return core->event_fn(
        core->event_fn_arg, mmagic_wlan,
        mmagic_wlan_event_beacon_rx, payload, payload_len);
}

static enum mmagic_status mmagic_core_event_wlan_standby_exit(
        struct mmagic_data *core,
        const struct mmagic_core_event_wlan_standby_exit_args *args)
{
    const uint8_t *payload = (const uint8_t *) args;
    size_t payload_len = sizeof(*args);
    MMOSAL_ASSERT(core->event_fn != NULL);
    return core->event_fn(
        core->event_fn_arg, mmagic_wlan,
        mmagic_wlan_event_standby_exit, payload, payload_len);
}

