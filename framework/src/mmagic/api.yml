# Copyright 2023-2025 Morse Micro
#
# SPDX-License-Identifier: Apache-2.0
#
---
enums:
  - name: enum_security_type
    description: Connection security type.
    values:
      - name: sae
        value: 0
        description: >-
          Simultaneous Authentication of Equals (password-based authentication).

      - name: owe
        value: 1
        description: Opportunistic Wireless Encryption (encrypted, passwordless).

      - name: open
        value: 2
        description: No security enabled at all.

  - name: enum_pmf_mode
    description: Protected management frame mode.
    values:
      - name: required
        value: 0
        description: Protected management frames must be used.

      - name: disabled
        value: 1
        description: No protected management frames.

  - name: enum_power_save_mode
    description: Enumeration of supported 802.11 power save modes.
    values:
      - name: disabled
        value: 0
        description: Power save disabled.

      - name: enabled
        value: 1
        description: Power save enabled.

  - name: enum_mcs10_mode
    description: Enumeration of MCS10 modes.
    values:
      - name: disabled
        value: 0
        description: MCS10 is not used.
      - name: forced
        value: 1
        description: MCS10 is always used instead of MCS0 when the bandwidth is 1 MHz.
      - name: auto
        value: 2
        description: MCS10 is used on retries instead of MCS0 when the bandwidth is 1 MHz.

  - name: enum_duty_cycle_mode
    description: Enumeration of duty cycle modes.
    values:
      - name: spread
        value: 0
        description: Duty cycle air time is evenly spread.
      - name: burst
        value: 1
        description: Duty cycle air time available in burst.

  - name: enum_station_type
    description: Enumeration of S1G non-AP STA types.
    values:
      - name: sensor
        value: 0
        description: Sensor type.

      - name: non_sensor
        value: 1
        description: Non-Sensor type.

  - name: enum_status
    description: Enumeration of return status codes.
    values:
      - name: ok
        value: 0
        description: Operation was successful.

      - name: error
        value: 1
        description: The operation failed with an unspecified error.

      - name: invalid_arg
        value: 2
        description: The operation failed due to an invalid argument.

      - name: unavailable
        value: 3
        description: Functionality is temporarily unavailable.

      - name: timeout
        value: 4
        description: The operation timed out.

      - name: invalid_stream
        value: 5
        description: An invalid stream was specified.

      - name: not_found
        value: 6
        description: Specified operation was not found.

      - name: not_supported
        value: 7
        description: Specified operation is not supported.

      - name: tx_error
        value: 8
        description: An error occured during transmission.

      - name: no_mem
        value: 9
        description: Failed due to memory allocation failure.

      - name: closed
        value: 10
        description: Failed due to stream being closed from the other side.

      - name: channel_list_not_set
        value: 11
        description: WLAN operation failed because the channel list has not been set.

      - name: shutdown_blocked
        value: 12
        description: WLAN shutdown failed.

      - name: channel_invalid
        value: 13
        description: Attempted to tune to a channel that was not available.

      - name: not_running
        value: 14
        description: Operation failed because the WLAN device was not booted.

      - name: no_link
        value: 15
        description: Operation failed because the link was not up.

      - name: unknown_host
        value: 16
        description: Failed to get an IP address for the given hostname.

      - name: socket_failed
        value: 17
        description: Failed to open the socket.

      - name: socket_connect_failed
        value: 18
        description: Socket connection failed.

      - name: socket_bind_failed
        value: 19
        description: Socket bind failed.

      - name: socket_listen_failed
        value: 20
        description: Socket listen failed.

      - name: ntp_kod_received
        value: 21
        description: NTP server returned Kiss-o'-Death.

      - name: ntp_kod_backoff_received
        value: 22
        description: >-
          NTP server returned Kiss-o'-Death with rate code.
          Client should backoff then retry.

      - name: socket_send_failed
        value: 23
        description: Socket send failed.

      - name: invalid_credentials
        value: 24
        description: >-
          Credentials provided were invalid.
          Possible cause: missing null terminator on a PEM key/certificate.

      - name: handshake_failed
        value: 25
        description: Error during TLS handshake.

      - name: authentication_failed
        value: 26
        description: Credentials provided by the server were not valid.

      - name: missing_credentials
        value: 27
        description: >-
          Missing certificate or key to open TLS connection.
          Provided through the TLS module configuration.

      - name: time_not_synchronized
        value: 28
        description: >-
          Internal time has not been synchronized.
          This is required for certificate verification for TLS.
          Use the NTP module to synchronize internal time.

      - name: mqtt_refused
        value: 29
        description: The server refused a CONNECT or SUBSCRIBE.

      - name: mqtt_keepalive_timeout
        value: 30
        description: >-
            Timed out while waiting for PINGRESP.
            Connection to the broker has been lost.

      - name: bad_version
        value: 32
        description: Operation failed due to a version mismatch.

  - name: enum_iperf_mode
    description: Mode to use when running the iperf.
    values:
      - name: udp_server
        value: 0
        description: Iperf UDP server (RX).

      - name: tcp_server
        value: 1
        description: Iperf TCP server (RX).

      - name: udp_client
        value: 2
        description: Iperf UDP client (TX).

      - name: tcp_client
        value: 3
        description: Iperf TCP client (TX).

  - name: enum_iperf_state
    description: Current state of iperf session.
    values:
      - name: not_started
        value: 0
        description: Iperf session not started.

      - name: running
        value: 1
        description: Iperf session is in progress.

      - name: finished
        value: 2
        description: Iperf session has completed.

      - name: aborted
        value: 3
        description: Iperf session has been aborted.

  - name: enum_ip_link_state
    description: Status of the IP link.
    values:
      - name: down
        value: 0
        description: Link is down because the interface is down or DHCP has not yet completed.

      - name: up
        value: 1
        description: Link is up. This implies that the interface is up and DHCP has completed.

  - name: enum_deep_sleep_mode
    description: Deep sleep modes for the agent MCU.
    values:
      - name: disabled
        value: 0
        description: Deep sleep is disabled.
      - name: one_shot
        value: 1
        description: Deep sleep is enabled until activity occurs on the datalink.
      - name: hardware
        value: 2
        description: The datalink layer is responsible for waking the agent.

  - name: enum_standby_mode_exit_reason
    description: Reasons for exiting standby mode.
    values:
      - name: standby_exit_none
        value: 0
        description: Standby mode was exited manually through a call to standby_exit.
      - name: standby_exit_wakeup_frame
        value: 1
        description: We were woken up by a wakeup frame.
      - name: standby_exit_associate
        value: 2
        description: We just reassociated with the AP.
      - name: standby_exit_ext_input
        value: 3
        description: We were woken up by an external input trigger.
      - name: standby_exit_whitelist_pkt
        value: 4
        description: We received a packet from a whitelist source.
      - name: standby_exit_tcp_connection_lost
        value: 5
        description: An open TCP connection was lost.
      - name: standby_exit_hw_scan_not_enabled
        value: 6
        description: Hardware scan was not enabled.
      - name: standby_exit_hw_scan_failed_to_start
        value: 7
        description: Hardware scan failed to start.

  - name: enum_sta_state
    description: Station states
    values:
      - name: disconnected
        value: 1
        description: Disconnected from the AP.
      - name: connecting
        value: 2
        description: Connecting to the AP.
      - name: connected
        value: 3
        description: Connected to the AP.

  - name: enum_sta_event
    description: Station connection events.
    values:
      - name: scan_request
        value: 0
        description: The STA is starting a scan.

      - name: scan_complete
        value: 1
        description: The STA has finished a scan.

      - name: scan_abort
        value: 2
        description: The STA has aborted a scan early.

      - name: auth_request
        value: 3
        description: The STA is sending an authentication request to the AP.

      - name: assoc_request
        value: 4
        description: The STA is sending an association request to the AP.

      - name: deauth_tx
        value: 5
        description: The STA is sending an de-authorization request to the AP.

      - name: ctrl_port_open
        value: 6
        description: The Supplicant IEEE 802.1X Controlled Port is now open.

      - name: ctrl_port_closed
        value: 7
        description: The Supplicant IEEE 802.1X Controlled Port is now closed.

structs:
  - name: struct_mac_addr
    description: Data type to contain mac address byte array.
    elements:
      - name: addr
        description: Array containing the mac addr.
        type: array6_uint8_t

  - name: struct_country_code
    description: >-
      Data type to contain Two character country code (null-terminated)
      used to identify the regulatory domain.
    elements:
      - name: country_code
        description: Array containing the country code, including room for null-terminator.
        type: array3_char

  - name: struct_oui
    description: Data type to contain a three octet OUI.
    elements:
      - name: oui
        description: The 3 octet OUI.
        type: array3_uint8_t

  - name: struct_oui_list
    description: Data type to contain a list of three octet OUIs.
    elements:
      - name: count
        description: The number of OUIs in the list.
        type: uint8_t
      - name: ouis
        description: The OUI data.
        type: array5_struct_oui

  - name: struct_scan_result
    description: Structure for holding a scan result.
    elements:
      - name: ssid
        description: SSID of the AP.
        type: string32

      - name: bssid
        description: BSSID of the AP network.
        type: struct_mac_addr

      - name: rssi
        description: RSSI of the AP in dBm.
        type: int32_t

      - name: ies
        description: Pointer to the start of the Information Elements within the Probe Response
                     frame.
        type: raw255

      - name: received_ies_len
        description: Length of the ies field in the received frame. May exceed the size of the ies
                     buffer in this structure.
        type: uint16_t

      - name: beacon_interval
        description: Value of the Beacon Interval field.
        type: uint16_t

      - name: capability_info
        description: Value of the Capability Information field.
        type: uint16_t

      - name: channel_freq_hz
        description: Center frequency in Hz of the channel where the frame was received.
        type: uint32_t

      - name: bw_mhz
        description: Bandwidth, in MHz, where the frame was received.
        type: uint8_t

      - name: op_bw_mhz
        description: Operating bandwidth, in MHz, of the access point.
        type: uint8_t

      - name: tsf
        description: TSF timestamp in the Probe Response frame.
        type: uint64_t

  - name: struct_version_info
    description: Structure for devise firmware and hardware versions.
    elements:
      - name: application_version
        description: Version of the application software.
        type: string32

      - name: bootloader_version
        description: Version of the bootloader software.
        type: string32

      - name: user_hardware_version
        description: Version of the user hardware.
        type: string32

      - name: morse_firmware_version
        description: Version of the Morse firmware.
        type: string32

      - name: morselib_version
        description: Version of the Morse IoT SDK library.
        type: string32

      - name: morse_hardware_version
        description: Version of the Morse hardware.
        type: string32

  - name: struct_scan_status
    description: Structure for returning the scan status.
    elements:
      - name: results
        description: Array of scan results.
        type: array10_struct_scan_result

      - name: num
        description: Number of results retrieved.
        type: uint8_t

  - name: struct_ip_addr
    description: >-
      Data type for a string representation of an IP address. Dotted decimal notation for IPv4
      addresses and colon-separated hexadecimal notation for IPv6 addresses.
    elements:
      - name: addr
        description: Array containing the IP string.
        type: array48_char

  - name: struct_ip_status
    description: Structure to contain the current IP status.
    elements:
      - name: link_state
        description: Current link state.
        type: enum_ip_link_state

      - name: dhcp_enabled
        description: Whether or not dhcp is enabled.
        type: bool

      - name: ip_addr
        description: Current IP address.
        type: struct_ip_addr

      - name: netmask
        description: Current IP network mask.
        type: struct_ip_addr

      - name: gateway
        description: Current IP gateway.
        type: struct_ip_addr

      - name: broadcast
        description: Current broadcast IP address.
        type: struct_ip_addr

      - name: dns_servers
        description: DNS server IP addresses.
        type: array2_struct_ip_addr

  - name: struct_ping_status
    description: Data structure to store ping results.
    elements:
      - name: receiver_addr
        description: IP address of the device receiving the ping requests.
        type: struct_ip_addr

      - name: total_count
        description: Total number of requests sent.
        type: uint32_t

      - name: recv_count
        description: The number of ping responses received.
        type: uint32_t

      - name: min_time_ms
        description: The minimum latency in ms between request sent and response received.
        type: uint32_t

      - name: avg_time_ms
        description: The average latency in ms between request sent and response received.
        type: uint32_t

      - name: max_time_ms
        description: The maximum latency in ms between request sent and response received.
        type: uint32_t

      - name: session_id
        description: Stores non-zero session ID whilst ping session is running.
        type: uint16_t

  - name: struct_iperf_status
    description: Data structure to store iperf results.
    elements:
      - name: remote_addr
        description: IP address of the remote device.
        type: struct_ip_addr

      - name: remote_port
        description: Port number of the remote device.
        type: uint16_t

      - name: local_addr
        description: IP address of the local device.
        type: struct_ip_addr

      - name: local_port
        description: Port number of the local device.
        type: uint16_t

      - name: bytes_transferred
        description: The number of bytes of data transferred during the iperf test.
        type: uint64_t

      - name: duration_ms
        description: The duration of the iperf test in milliseconds.
        type: uint32_t

      - name: bandwidth_kbitpsec
        description: The average throughput in kbps.
        type: uint32_t

  - name: struct_buffer64
    description: Generic 64 byte buffer.
    elements:
      - name: buffer
        description: The 64 byte buffer.
        type: array64_uint8_t

      - name: len
        description: Length of data in the buffer.
        type: uint8_t

modules:
  - name: wlan
    id: 1
    description: Wireless LAN management.

    configs:
      - name: country_code
        id: 0
        description: Two character country code used to identify the regulatory domain.
        type: struct_country_code

      - name: ssid
        id: 1
        description: SSID of the AP to connect to, can be 1-32 characters long.
        type: string32

      - name: password
        id: 2
        description: Password used when associating, 1-100 characters long.
        type: string100

      - name: security
        id: 3
        description: Security type to used when associating.
        type: enum_security_type

      - name: raw_priority
        id: 4
        description: >-
          Priority to request if raw is supported by the AP. Valid priorities are 0-7.
          -1 disables RAW.
        type: int16_t

      - name: bssid
        id: 5
        description: BSSID of the ap to associate to, all 0x00 for any.
        type: struct_mac_addr

      - name: pmf_mode
        id: 6
        description: Protected Management Frame mode to use (802.11w).
        type: enum_pmf_mode

      - name: station_type
        id: 7
        description: S1G non-AP STA type.
        type: enum_station_type

      - name: rts_threshold
        id: 8
        description: The RTS threshold (in octets) to set, or 0 to disable.
        type: uint32_t

      - name: sgi_enabled
        id: 9
        description: Boolean value indicating whether SGI support should be enabled.
        type: bool

      - name: subbands_enabled
        id: 10
        description: Boolean value indicating whether sub-band support should be enabled.
        type: bool

      - name: ampdu_enabled
        id: 11
        description: Boolean value indicating whether AMPDU support should be enabled.
        type: bool

      - name: power_save_mode
        id: 12
        description: Sets the 802.11 power save mode.
        type: enum_power_save_mode

      - name: fragment_threshold
        id: 13
        description: >-
          Sets the 802.11 fragmentation threshold. The fragmentation threshold (in octets)
          to set, or 0 to disable.
        type: uint32_t

      - name: cac_enabled
        id: 14
        description: Whether Centralized Authentication Controlled is enabled on the STA.
        type: bool

      - name: offload_arp_response
        id: 15
        description: >-
          If true, enables ARP response offload which allows the Morse chip to directly respond
          to ARP requests without waking up the host processor.
        type: bool

      - name: offload_arp_refresh_s
        id: 16
        description: >-
          If non zero, enables ARP refresh offload with the specified interval in seconds.
          Note: ARP response offload needs to be enabled for this feature to work.
        type: uint32_t

      - name: min_health_check_intvl_ms
        id: 17
        description: >-
          The minimum interval to wait after the last health check before triggering another.
          If this parameter is 0 then health checks will always happen at the max_interval_ms
          value. min_interval_ms must always be less than or equal to max_interval_ms.
          If only min_health_check_intvl_ms is specified, then max_health_check_intvl_ms
          is assumed to be unbounded.
        type: uint32_t

      - name: max_health_check_intvl_ms
        id: 18
        description: >-
          The maximum interval to wait after the last health check before triggering another.
          If this parameter is 0 then periodic health checks will be disabled. min_interval_ms
          must always be less than or equal to max_interval_ms. Set this to UINT32_MAX to
          have the maximum unbounded. If only max_health_check_intvl_ms is specified,
          then min_health_check_intvl_ms is assumed to be 0.
        type: uint32_t

      - name: ndp_probe_enabled
        id: 19
        description: >-
          Boolean value indicating whether NDP probe support should be enabled.
          Will only take effect after a connect or scan command is sent.
        type: bool

      - name: sta_scan_interval_base_s
        id: 20
        description: >-
            The base scan interval (in seconds) to use when (re)connecting. See documentation
            of mmwlan_sta_args.scan_interval_base_s for further details.
            Note that changes will only take effect on invocation of wlan-connect.
        type: uint16_t

      - name: sta_scan_interval_limit_s
        id: 21
        description: >-
            The maximum interval between scan attempts when (re)connecting. See documentation
            of mmwlan_sta_args.scan_interval_limit_s for further details.
            Note that changes will only take effect on invocation of wlan-connect.
        type: uint16_t

      - name: qos_0_params
        id: 22
        description: >-
          The default QoS queue configuration for Access Category 0 (AC_BE) that is active
          while the station is connecting to an Access Point. This is a string containing
          the following comma separated integer values (in order): `aifs,cw_min,cw_max,txop_max_us`.
          For example: `3,15,1023,15008`. More information about the individual parameters can be
          found in the API documentation for `mmwlan_qos_queue_params`.
        type: string32

      - name: qos_1_params
        id: 23
        description: >-
          The default QoS queue configuration for Access Category 1 (AC_BK) that is active
          while the station is connecting to an Access Point. This is a string containing
          the following comma separated integer values (in order): `aifs,cw_min,cw_max,txop_max_us`.
          For example: `7,15,1023,15008`. More information about the individual parameters can be
          found in the API documentation for `mmwlan_qos_queue_params`.
        type: string32

      - name: qos_2_params
        id: 24
        description: >-
          The default QoS queue configuration for Access Category 2 (AC_VI) that is active
          while the station is connecting to an Access Point. This is a string containing
          the following comma separated integer values (in order): `aifs,cw_min,cw_max,txop_max_us`.
          For example: `2,7,15,15008`. More information about the individual parameters can be
          found in the API documentation for `mmwlan_qos_queue_params`.
        type: string32

      - name: qos_3_params
        id: 25
        description: >-
          The default QoS queue configuration for Access Category 3 (AC_VO) that is active
          while the station is connecting to an Access Point. This is a string containing
          the following comma separated integer values (in order): `aifs,cw_min,cw_max,txop_max_us`.
          For example: `2,3,7,15008`. More information about the individual parameters can be
          found in the API documentation for `mmwlan_qos_queue_params`.
        type: string32

      - name: mcs10_mode
        id: 26
        description: >-
          The currently configured MCS10 behavior. This only takes effect after calling the WLAN
          connect command. This is an enum with 3 modes: disabled, which will never use MCS10,
          forced, which will always use MCS10 instead of MCS0 if the bandwidth is 1 MHz, and auto,
          which will use MCS10 on retries instead of MCS0 when the bandwidth is 1 MHz.
        type: enum_mcs10_mode

      - name: sta_evt_en
        id: 27
        description: >-
          When set to true, STA event notifications will be provided. Setting this to
          false will suppress these notifications. Defaults to false.
        type: bool

      - name: duty_cycle_mode
        id: 28
        description: >-
          The duty cycle air time distribution mode. The duty cycle mode can be set to spread, where
          the air time is spread evenly across the window; or burst, where air time is available to
          be consumed immediately.
        type: enum_duty_cycle_mode

    commands:
      - name: connect
        id: 8
        description: >-
          Brings up the WLAN interface and connects to the AP with configured parameters.

        command_args:
          - name: timeout
            description: >-
              Duration in milliseconds to wait for connection establish, if connection does not get
              established an explicit disconnect will be sent. 0 to return immediately without
              waiting.
            type: uint32_t

      - name: disconnect
        id: 9
        description: Disconnects and brings down the WLAN interface.

      - name: scan
        id: 10
        description: Starts an undirected scan for available networks.
        command_args:
          - name: ssid
            type: string32
            description: >-
              Optional SSID to include in probe requests.
          - name: timeout
            description: >-
              Optional duration in milliseconds to wait for scan to complete, if scan does not
              complete by the timeout any available results will be returned and the scan aborted.
            type: uint32_t
        response_args:
          - name: results
            description: Reference to structure to store the results of the scan.
            type: struct_scan_status

      - name: get_rssi
        id: 11
        description: Retrieves the RSSI if the WLAN interface is up, else 0.
        response_args:
          - name: rssi
            description: The RSSI in dBm.
            type: int32_t

      - name: get_mac_addr
        id: 12
        description: Retrieves the MAC address if the WLAN interface is up.
        response_args:
          - name: mac_addr
            description: Buffer to receive the MAC address.
            type: struct_mac_addr

      - name: wnm_sleep
        id: 13
        description: Requests entry or exit from extended sleep (wnm sleep) if the WLAN interface is up.

        command_args:
          - name: wnm_sleep_enabled
            description: Boolean indicating whether WNM sleep is enabled.
            type: bool

      - name: beacon_monitor_enable
        id: 14
        description: >-
          Enable beacon monitoring with the given filter settings. If beacon monitoring is already
          enabled it will be reconfigured with the given arguments.

        command_args:
          - name: oui_filter
            description: OUIs to monitor.
            type: struct_oui_list

      - name: beacon_monitor_disable
        id: 15
        description: >-
          Disable beacon monitoring. If beacon monitor is not enabled then this has no effect.

      - name: standby_enter
        id: 16
        description: >-
          This puts the Morse chip into standby mode allowing the host processor to go to sleep
          while the Morse chip takes over certain functionality to keep the connection alive with
          the provision to wake up the host processor when certain conditions are met.

      - name: standby_exit
        id: 17
        description: >-
          Forces the Morse chip to exit standby mode. There may be certain instances such as a
          timer expiry, which cause the host chip to wake up independant of the Morse chip. In
          such situations, the host calls this function to instruct the Morse chip to exit standby
          mode and return to normal operating mode.

      - name: standby_set_status_payload
        id: 18
        description: >-
          Sets the user payload for the standby status packet. Once standby mode is enabled, the
          Morse chip will periodically emit a UDP standby status packet regardless of
          whether it is in standby or not. The UDP packet will also be sent immediately upon
          entering or exiting Standby mode. If this command is not executed then the standby
          status packet will contain no payload.

        command_args:
          - name: payload
            description: Payload to append to standby status packets.
            type: struct_buffer64

      - name: standby_set_wake_filter
        id: 19
        description: >-
          Configures the standby mode UDP wake packet filter. The system can be woken up from
          standby mode by sending it a UDP wake packet. If a wake filter is set using this function
          then the wake packet will only wake up the system if the specified filter pattern matches
          the payload at the specified offset within the payload. If this command is not executed
          then any wake packet will wake up the system.

        command_args:
          - name: filter
            description: Filter to apply to wake packets to wake on match.
            type: struct_buffer64
          - name: offset
            description: Offset within wake packet payload to apply the filter.
            type: uint32_t

      - name: standby_set_config
        id: 20
        description: >-
          Sets the standby mode configuration parameters. If this command is not executed
          then the defaults are as specified.

        command_args:
          - name: notify_period_s
            description: Interval in seconds for transmitting Standby status packets (Default 15s).
            type: uint32_t
          - name: src_ip
            description: Source IP address to use for the standby status packets (Default 0.0.0.0).
            type: struct_ip_addr
          - name: dst_ip
            description: Destination IP address for the standby status packets (Default 0.0.0.0).
            type: struct_ip_addr
          - name: dst_port
            description: >-
              Destination UDP Port for the standby status packets, also used the source port for
              outgoing UDP port for outgoing UDP packets (Default 22000).
            type: uint16_t
          - name: bss_inactivity_s
            description: >-
              Deprecated. This parameter is no longer used and will be removed in a future release.
            type: uint32_t
          - name: snooze_period_s
            description: >-
              The interval in seconds to wake periodically from snooze mode and check for beacons.
              If no beacons are found then the Morse chip will re-enter snooze mode. If beacons are
              found then the Morse chip will exit standby mode so the host can reassociate
              (Default 60s).
            type: uint32_t
          - name: snooze_increment_s
            description: >-
              The amount in seconds to increase successive snooze intervals. This saves power
              by snoozing for longer before checking for beacons again if no beacons are found.
              (Default 0s).
            type: uint32_t
          - name: snooze_max_s
            description: >-
              The maximum time in seconds to snooze for after increments (Default unlimited).
            type: uint32_t

      - name: get_sta_status
        id: 21
        description: Retrieves the STA status of the WLAN interface.
        response_args:
          - name: sta_status
            description: The current STA status.
            type: enum_sta_state

    events:
      - name: beacon_rx
        id: 1
        description: >-
          Triggered when a beacon matching the configured beacon monitor filter(s) is received.

        event_args:
          - name: vendor_ies
            description: >-
              Raw octet string of Vendor Information Elements contained in the beacon.
              Only the IEs that match the configured filters are returned. If multiple matching
              IEs are present then they are concatenated in the buffer. Each IE is a TLV where
              the first byte is the Tag (0xDD for Vendor Specific IE), followed by a byte
              specifying the length IE contents (i.e., excluding the Tag and Length).
            type: raw1536

      - name: standby_exit
        id: 2
        description: >-
          Triggered when chip exits standby mode either manually or through an event.

        event_args:
          - name: reason
            description: >-
              Reason why we exited standby mode. If we manually exited standby mode through a call
              to wlan-standby_exit, then the reason will be standby_exit_none.
            type: enum_standby_mode_exit_reason

      - name: sta_event
        id: 3
        description: >-
          Triggered when STA event occurs when in STA mode.

        event_args:
          - name: event
            description: >-
              The reported WLAN STA evt.
            type: enum_sta_event

  - name: ip
    id: 2
    description: IP Stack Management

    configs:
      - name: ip_addr
        id: 0
        description: >-
          IP address to use for a static network connection. This will take effect when the reload
          command is successfully executed.
        type: struct_ip_addr

      - name: netmask
        id: 1
        description: >-
          Netmask to use for a static network connection. This will take effect when the reload
          command is successfully executed.
        type: struct_ip_addr

      - name: gateway
        id: 2
        description: >-
          Gateway to use for a static network connection. This will take effect when the reload
          command is successfully executed.
        type: struct_ip_addr

      - name: dns_server0
        id: 3
        description: >-
          Primary DNS server IP address. If a value is specified this will override the primary
          DNS server provided by DHCP (if any). Changes will take effect when the reload command
          is successfully executed.
        type: struct_ip_addr

      - name: dns_server1
        id: 4
        description: >-
          Secondary DNS server IP address. If a value is specified this will override the secondary
          DNS server provided by DHCP (if any). Changes will take effect when the reload command
          is successfully executed. Note that this option may be ignored by some IP stacks.
        type: struct_ip_addr

      - name: dhcp_enabled
        id: 5
        description: >-
          True to enable DHCP for IP address configuration, or false to use the static configuration
          given by ip_addr, netmask, and gateway. This will take effect when the reload command is
          successfully executed.
        type: bool

      - name: dhcp_offload
        id: 6
        description: >-
          If true, enables DHCP offload which allows the Morse chip to directly handle
          DHCP discovery and leases without waking up the host processor. Note: this comes into
          effect only if ip.dhcp_enabled is also true.
        type: bool

      - name: link_status_evt_en
        id: 7
        description: >-
          When set to true, IP link status notifications will be provided. Setting this to false
          will suppress these notifications. Defaults to true.
        type: bool

    commands:
      - name: status
        id: 8
        description: >-
          Gets the status of the IP stack.

        response_args:
          - name: status
            description: >-
              Reference to the struct to return the IP status retrieved from the network stack.
            type: struct_ip_status

      - name: reload
        id: 9
        description: >-
          Reloads the IP stack network configuration based on the current values in the subsystem
          config.

      - name: enable_tcp_keepalive_offload
        id: 10
        description: >-
          Enables sending periodic TCP keep-alive packets by the morse chip allowing the TCP
          connection to be maintained without waking up the host processor. This needs to be
          enabled before opening a TCP connection. As of now, this feature will work only
          on the first TCP connection opened after this command.

        command_args:
          - name: period_s
            description: Interval in seconds to send the keep-alive packets in.
            type: uint16_t
          - name: retry_count
            description: The number of times to retry before giving up.
            type: uint8_t
          - name: retry_interval_s
            description: The interval in seconds to wait between retries.
            type: uint8_t

      - name: disable_tcp_keepalive_offload
        id: 11
        description: Disables sending of TCP keepalive packets.

      - name: set_whitelist_filter
        id: 12
        description: >-
          Sets the whitelist filter specifing which incoming packets can wake the system from
          standby mode.

        command_args:
          - name: src_ip
            description: The IPv4 source address to match, 0.0.0.0 for any.
            type: struct_ip_addr
          - name: dest_ip
            description: >-
              The IPv4 destination address to match, 0.0.0.0 for any (Usually our IP address).
            type: struct_ip_addr
          - name: netmask
            description: The netmask to apply to the source or destination IP, 0.0.0.0 for any.
            type: struct_ip_addr
          - name: src_port
            description: The source port to match, 0 for any.
            type: uint16_t
          - name: dest_port
            description: The destination port to match, 0 for any.
            type: uint16_t
          - name: ip_protocol
            description: The IPv4 protocol number to match - 6 for TCP, 17 for UDP, 0 for any.
            type: uint8_t
          - name: llc_protocol
            description: >-
              The LLC protocol (or EtherType) to match - 0x0800 for IPv4 and 0x86DD for IPv6,
              0 for any.
            type: uint16_t

      - name: clear_whitelist_filter
        id: 13
        description: Clears any applied whitelist filters.

    events:
      - name: link_status
        id: 4
        description: >-
          Triggered when the IP stack has a valid address.

        event_args:
          - name: ip_link_status
            description: >-
              Link status for the WLAN interface. This is only valid when the WLAN interface is
              configured to be a STA rather than an AP.
            type: struct_ip_status

  - name: ping
    id: 3
    description: Ping application.

    configs:
      - name: target
        id: 0
        description: The IP address of the ping target.
        type: struct_ip_addr

      - name: interval
        id: 1
        description: The time interval between ping requests (in milliseconds).
        type: uint32_t

      - name: count
        id: 2
        description: >-
          This specifies the number of ping requests to send before terminating
          the session. If this is zero or exceeds UINT16_MAX (65535) then it
          it will be set to UINT16_MAX.
        type: uint32_t

    commands:
      - name: run
        id: 8
        description: Commences a ping session using the current values in the the subsystem config.
        response_args:
          - name: status
            description: >-
              Reference to the struct to return the status of the ping session.
            type: struct_ping_status

  - name: iperf
    id: 4
    description: Iperf application.

    configs:
      - name: mode
        id: 0
        description: >-
          The iperf mode to use. Valid values are udp_server, tcp_server, udp_client and tcp_client.
          If not set, defaults to udp_server.
        type: enum_iperf_mode

      - name: server
        id: 1
        description: IP address of server to connect to when in client mode.
        type: struct_ip_addr

      - name: port
        id: 2
        description: >-
          Specifies the local port to listen on when in server mode or the server port to send data
          to when in client mode.
        type: uint16_t

      - name: amount
        id: 3
        description: >-
          This specifies the duration for client transfers specified either in seconds or bytes.
          If this is negative, it specifies a time in seconds; if positive, it specifies the number
          of bytes to transmit.
        type: int32_t

    commands:
      - name: run
        id: 8
        description: Starts an iperf session using the current values in the the subsystem config.

        response_args:
          - name: status
            description: >-
              Reference to the struct to return the status of the iperf session.
            type: struct_iperf_status

  - name: sys
    id: 5
    description: System management.

    commands:
      - name: reset
        id: 8
        description: Performs a soft reset.

      - name: deep_sleep
        id: 9
        description: Enters deep sleep mode.
        command_args:
          - name: mode
            description: Deep sleep mode to enter.
            type: enum_deep_sleep_mode

      - name: get_version
        id: 10
        description: Gets the device firmware and hardware versions.
        response_args:
          - name: results
            description: Reference to structure to store the version information.
            type: struct_version_info

  - name: tcp
    id: 6
    description: TCP Socket IO, supports secure connections using TLS.
    cli_support: False

    commands:
      - name: connect
        id: 8
        description: Opens a client TCP socket and returns its stream ID.
        response_timeout_ms: 15000
        command_args:
          - name: url
            description: URL of the server to connect to.
            type: string254

          - name: port
            description: TCP port to connect to.
            type: uint16_t

          - name: enable_tls
            description: Enables TLS. Configure certificates through the TLS module.
            type: bool

        response_args:
          - name: stream_id
            description: Stream ID of the opened socket.
            type: uint8_t

      - name: bind
        id: 9
        description: Opens a server TCP socket and returns its stream ID.
        command_args:
          - name: port
            description: TCP port to listen on.
            type: uint16_t

        response_args:
          - name: stream_id
            description: Stream ID of the opened socket.
            type: uint8_t

      - name: recv
        id: 10
        description: Reads from a socket.
        stream_type: True
        command_args:
          - name: stream_id
            description: Stream ID of the socket to receive from.
            type: uint8_t

          - name: len
            description: TCP port to listen on.
            type: uint16_t

          - name: timeout
            description: Timeout in ms. 0 to return immediately, UINT32_MAX to wait indefinately.
            type: uint32_t

        response_args:
          - name: buffer
            description: Buffer of read data.
            type: raw1536

      - name: send
        id: 11
        description: Writes to a socket.
        stream_type: True
        command_args:
          - name: stream_id
            description: Stream ID of the socket to send on.
            type: uint8_t

          - name: buffer
            description: Buffer to send.
            type: raw1536

      - name: read_poll
        id: 12
        description: Polls the socket till it is ready for reading.
        stream_type: True
        command_args:
          - name: stream_id
            description: Stream ID of the socket to wait on.
            type: uint8_t

          - name: timeout
            description: Timeout in ms. 0 to return immediately, UINT32_MAX to wait indefinately.
            type: uint32_t

      - name: write_poll
        id: 13
        description: Polls the socket till it is ready for writing.
        stream_type: True
        command_args:
          - name: stream_id
            description: Stream ID of the socket to wait on.
            type: uint8_t

          - name: timeout
            description: Timeout in ms. 0 to return immediately, UINT32_MAX to wait indefinately.
            type: uint32_t

      - name: accept
        id: 14
        description: Waits for an incoming socket connection and returns a new stream ID.
        stream_type: True
        response_timeout_ms: -1
        command_args:
          - name: stream_id
            description: Stream ID of the bound socket.
            type: uint8_t

        response_args:
          - name: stream_id
            description: Stream ID of the new incoming connection.
            type: uint8_t

      - name: close
        id: 15
        description: Closes and frees the socket.
        command_args:
          - name: stream_id
            description: Stream ID of the socket to close.
            type: uint8_t

  - name: tls
    id: 7
    description: TLS support.
    cli_support: False

    configs:
      - name: root_ca_certificate
        id: 0
        description: >-
            Root certificate authority certificate.
            Supported formats are PEM and DER.
            Must be null terminated if in PEM format.
        type: raw1536

      - name: client_certificate
        id: 1
        description: >-
            Certificate to identify the client.
            Supported formats are PEM and DER.
            Must be null terminated if in PEM format.
        type: raw1536

      - name: client_private_key
        id: 2
        description: >-
            Client private key.
            Supported formats are PEM and DER.
            Must be null terminated if in PEM format.
        type: raw1536

  - name: ntp
    id: 8
    description: Network Time Protocol.
    cli_support: False

    configs:
      - name: server
        id: 0
        description: >-
          The hostname or IP of the NTP server.
          Defaults to "0.pool.ntp.org".
        type: string254

    commands:
      - name: sync
        id: 8
        description: Synchronizes internal time using the NTP server.

      - name: get_time
        id: 9
        description: Reads current internal time.
        response_args:
          - name: timestamp
            description: Current internal time (Seconds since epoch, UTC).
            type: uint64_t

  - name: mqtt
    id: 9
    description: MQTT agent.
    cli_support: False

    commands:
      - name: start_agent
        id: 8
        description: >-
            Starts the MQTT agent. Automatically handles reconnects with a
            backoff timer and saves up to 10 subscriptions across reconnects.
            Listen to "broker_connection" events for information about
            the state of the connection to the broker.
        command_args:
          - name: url
            description: URL of the broker to connect to.
            type: string254

          - name: port
            description: Port of the broker to connect to.
            type: uint16_t

          - name: username
            description: Username to connect to the broker.
            type: string100

          - name: password
            description: Password to connect to the broker.
            type: string100

          - name: secure
            description: >-
                Enables TLS for brokers that require it.
                Configure certificates through the TLS module.
            type: bool

        response_args:
          - name: stream_id
            description: Stream ID of the opened socket.
            type: uint8_t

      - name: publish
        id: 9
        description: Publishes a message on a topic.
        command_args:
          - name: stream_id
            description: Stream ID of the MQTT connection.
            type: uint8_t

          - name: topic
            description: MQTT topic to publish to.
            type: string254

          - name: payload
            description: Contents of the message.
            type: raw1536

          - name: qos
            description: >-
                MQTT quality of service (0-2).
                Only 0 is supported for now.
            type: uint8_t

      - name: subscribe
        id: 10
        description: >-
          Subscribes to a topic. Messages will arrive in the "message_received" event.
        command_args:
          - name: stream_id
            description: Stream ID of the MQTT connection.
            type: uint8_t

          - name: topic
            description: MQTT topic to subscribe to.
            type: string254

          - name: qos
            description: >-
                MQTT quality of service (0-2).
                Only 0 is supported for now.
            type: uint8_t

      - name: stop_agent
        id: 11
        description: Stops the MQTT agent.
        command_args:
          - name: stream_id
            description: Stream ID of the MQTT connection.
            type: uint8_t

    events:
      - name: message_received
        id: 5
        description: >-
          Triggered when a message is received on a topic that has been subscribed to.

        event_args:
          - name: stream_id
            description: Stream ID of the MQTT connection.
            type: uint8_t

          - name: topic
            description: MQTT topic the message was received on.
            type: string254

          - name: payload
            description: Contents of the message.
            type: raw1536

      - name: broker_connection
        id: 6
        description: State of the connection to the broker (see mqtt-start).

        event_args:
          - name: stream_id
            description: Stream ID of the MQTT connection.
            type: uint8_t

          - name: connection_state
            description: Current state of the connection to the broker.
            type: enum_status
